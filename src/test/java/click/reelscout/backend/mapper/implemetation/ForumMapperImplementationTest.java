package click.reelscout.backend.mapper.implemetation;

import click.reelscout.backend.builder.definition.ForumPostBuilder;
import click.reelscout.backend.builder.definition.ForumThreadBuilder;
import click.reelscout.backend.dto.response.ForumPostResponseDTO;
import click.reelscout.backend.dto.response.ForumThreadResponseDTO;
import click.reelscout.backend.model.jpa.Content;
import click.reelscout.backend.model.jpa.ForumPost;
import click.reelscout.backend.model.jpa.ForumThread;
import click.reelscout.backend.model.jpa.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Answers;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ForumMapperImplementationTest {

    @Mock(answer = Answers.RETURNS_SELF) private ForumThreadBuilder threadBuilder;
    @Mock(answer = Answers.RETURNS_SELF) private ForumPostBuilder postBuilder;

    private ForumMapperImplementation mapper;

    @BeforeEach
    void setUp() {
        // Inject the mocked builders via the constructor generated by @RequiredArgsConstructor
        mapper = new ForumMapperImplementation(threadBuilder, postBuilder);
    }

    @Test
    void toThreadDto_mapsAllFields() {
        // Arrange: build a thread with nested content/user and timestamps
        Content content = mock(Content.class);
        when(content.getId()).thenReturn(42L);

        User author = mock(User.class);
        when(author.getUsername()).thenReturn("alice");

        ForumThread thread = mock(ForumThread.class);
        when(thread.getId()).thenReturn(7L);
        when(thread.getContent()).thenReturn(content);
        when(thread.getTitle()).thenReturn("Hello");
        when(thread.getCreatedBy()).thenReturn(author);
        LocalDateTime created = LocalDateTime.of(2024, 5, 10, 12, 0);
        LocalDateTime updated = LocalDateTime.of(2024, 5, 11, 8, 30);
        when(thread.getCreatedAt()).thenReturn(created);
        when(thread.getUpdatedAt()).thenReturn(updated);

        // Act
        ForumThreadResponseDTO dto = mapper.toThreadDto(thread, 3L);

        // Assert: all fields are mapped as-is, plus postCount passed in
        assertThat(dto.getId()).isEqualTo(7L);
        assertThat(dto.getContentId()).isEqualTo(42L);
        assertThat(dto.getTitle()).isEqualTo("Hello");
        assertThat(dto.getCreatedByUsername()).isEqualTo("alice");
        assertThat(dto.getCreatedAt()).isEqualTo(created);
        assertThat(dto.getUpdatedAt()).isEqualTo(updated);
        assertThat(dto.getPostCount()).isEqualTo(3L);

        // Ensure builders are not touched by DTO mapping methods
        verifyNoInteractions(threadBuilder, postBuilder);
    }

    @Test
    void toPostDto_mapsAllFields_withNullParent() {
        // Arrange
        ForumThread thread = mock(ForumThread.class);
        when(thread.getId()).thenReturn(100L);

        User author = mock(User.class);
        when(author.getId()).thenReturn(9L);

        ForumPost post = mock(ForumPost.class);
        when(post.getId()).thenReturn(501L);
        when(post.getThread()).thenReturn(thread);
        when(post.getAuthor()).thenReturn(author);
        when(post.getBody()).thenReturn("Body text");
        when(post.getParent()).thenReturn(null);
        LocalDateTime created = LocalDateTime.of(2024, 6, 1, 14, 15);
        LocalDateTime updated = LocalDateTime.of(2024, 6, 2, 9, 0);
        when(post.getCreatedAt()).thenReturn(created);
        when(post.getUpdatedAt()).thenReturn(updated);

        // Act
        ForumPostResponseDTO dto = mapper.toPostDto(post);

        // Assert
        assertThat(dto.getId()).isEqualTo(501L);
        assertThat(dto.getThreadId()).isEqualTo(100L);
        assertThat(dto.getAuthorId()).isEqualTo(9L);
        assertThat(dto.getBody()).isEqualTo("Body text");
        assertThat(dto.getParentId()).isNull();
        assertThat(dto.getCreatedAt()).isEqualTo(created);
        assertThat(dto.getUpdatedAt()).isEqualTo(updated);

        verifyNoInteractions(threadBuilder, postBuilder);
    }

    @Test
    void toPostDto_mapsAllFields_withParentPresent() {
        // Arrange
        ForumThread thread = mock(ForumThread.class);
        when(thread.getId()).thenReturn(200L);

        User author = mock(User.class);
        when(author.getId()).thenReturn(22L);

        ForumPost parent = mock(ForumPost.class);
        when(parent.getId()).thenReturn(777L);

        ForumPost post = mock(ForumPost.class);
        when(post.getId()).thenReturn(888L);
        when(post.getThread()).thenReturn(thread);
        when(post.getAuthor()).thenReturn(author);
        when(post.getBody()).thenReturn("Reply body");
        when(post.getParent()).thenReturn(parent);
        when(post.getCreatedAt()).thenReturn(LocalDateTime.of(2024, 6, 3, 10, 0));
        when(post.getUpdatedAt()).thenReturn(LocalDateTime.of(2024, 6, 3, 11, 0));

        // Act
        ForumPostResponseDTO dto = mapper.toPostDto(post);

        // Assert
        assertThat(dto.getId()).isEqualTo(888L);
        assertThat(dto.getThreadId()).isEqualTo(200L);
        assertThat(dto.getAuthorId()).isEqualTo(22L);
        assertThat(dto.getBody()).isEqualTo("Reply body");
        assertThat(dto.getParentId()).isEqualTo(777L);
    }

    @Test
    void toBuilder_fromThread_chainsAllFieldsOnThreadBuilder() {
        // Arrange
        Content content = mock(Content.class);
        User author = mock(User.class);
        ForumThread thread = mock(ForumThread.class);
        when(thread.getId()).thenReturn(1L);
        when(thread.getContent()).thenReturn(content);
        when(thread.getTitle()).thenReturn("T");
        when(thread.getCreatedBy()).thenReturn(author);
        LocalDateTime created = LocalDateTime.of(2023, 1, 1, 0, 0);
        LocalDateTime updated = LocalDateTime.of(2023, 1, 2, 0, 0);
        when(thread.getCreatedAt()).thenReturn(created);
        when(thread.getUpdatedAt()).thenReturn(updated);

        // Act
        ForumThreadBuilder returned = mapper.toBuilder(thread);

        // Assert: the same builder mock is returned after chaining
        assertThat(returned).isSameAs(threadBuilder);

        // Verify that every field is forwarded to the fluent builder
        InOrder inOrder = inOrder(threadBuilder);
        inOrder.verify(threadBuilder).id(1L);
        inOrder.verify(threadBuilder).content(content);
        inOrder.verify(threadBuilder).title("T");
        inOrder.verify(threadBuilder).createdBy(author);
        inOrder.verify(threadBuilder).createdAt(created);
        inOrder.verify(threadBuilder).updatedAt(updated);
        verifyNoInteractions(postBuilder);
    }

    @Test
    void toBuilder_fromPost_chainsAllFieldsOnPostBuilder() {
        // Arrange
        ForumThread thread = mock(ForumThread.class);
        User author = mock(User.class);
        ForumPost parent = mock(ForumPost.class);

        ForumPost post = mock(ForumPost.class);
        when(post.getId()).thenReturn(10L);
        when(post.getThread()).thenReturn(thread);
        when(post.getAuthor()).thenReturn(author);
        when(post.getParent()).thenReturn(parent);
        when(post.getBody()).thenReturn("B");
        LocalDateTime created = LocalDateTime.of(2023, 2, 1, 12, 0);
        LocalDateTime updated = LocalDateTime.of(2023, 2, 1, 12, 30);
        when(post.getCreatedAt()).thenReturn(created);
        when(post.getUpdatedAt()).thenReturn(updated);

        // Act
        ForumPostBuilder returned = mapper.toBuilder(post);

        // Assert
        assertThat(returned).isSameAs(postBuilder);

        InOrder inOrder = inOrder(postBuilder);
        inOrder.verify(postBuilder).id(10L);
        inOrder.verify(postBuilder).thread(thread);
        inOrder.verify(postBuilder).author(author);
        inOrder.verify(postBuilder).parent(parent);
        inOrder.verify(postBuilder).body("B");
        inOrder.verify(postBuilder).createdAt(created);
        inOrder.verify(postBuilder).updatedAt(updated);
        verifyNoInteractions(threadBuilder);
    }

    @Test
    void toEntity_thread_usesBuilderWithNullIdAndTimestamps_andReturnsBuiltEntity() {
        // Arrange
        Content content = mock(Content.class);
        User author = mock(User.class);

        ForumThread built = mock(ForumThread.class);
        when(threadBuilder.build()).thenReturn(built);

        // Act
        ForumThread result = mapper.toEntity(content, author, "New title");

        // Assert: the exact instance from build() is returned
        assertThat(result).isSameAs(built);

        // Verify the fluent calls with expected values (including nulls)
        InOrder inOrder = inOrder(threadBuilder);
        inOrder.verify(threadBuilder).id(null);
        inOrder.verify(threadBuilder).content(content);
        inOrder.verify(threadBuilder).title("New title");
        inOrder.verify(threadBuilder).createdBy(author);
        inOrder.verify(threadBuilder).createdAt(null);
        inOrder.verify(threadBuilder).updatedAt(null);
        inOrder.verify(threadBuilder).build();
        verifyNoInteractions(postBuilder);
    }

    @Test
    void toEntity_post_usesBuilderWithNullIdAndTimestamps_andReturnsBuiltEntity() {
        // Arrange
        ForumThread thread = mock(ForumThread.class);
        User author = mock(User.class);
        ForumPost parent = mock(ForumPost.class);

        ForumPost built = mock(ForumPost.class);
        when(postBuilder.build()).thenReturn(built);

        // Act
        ForumPost result = mapper.toEntity(thread, author, parent, "Body");

        // Assert
        assertThat(result).isSameAs(built);

        InOrder inOrder = inOrder(postBuilder);
        inOrder.verify(postBuilder).id(null);
        inOrder.verify(postBuilder).thread(thread);
        inOrder.verify(postBuilder).author(author);
        inOrder.verify(postBuilder).parent(parent);
        inOrder.verify(postBuilder).body("Body");
        inOrder.verify(postBuilder).createdAt(null);
        inOrder.verify(postBuilder).updatedAt(null);
        inOrder.verify(postBuilder).build();
        verifyNoInteractions(threadBuilder);
    }
}